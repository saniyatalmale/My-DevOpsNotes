🚀 Deploying a 3-Tier Web Application (Frontend + Backend + Database)
Architecture Overview
Frontend: React.js (Hosted on EC2 + Apache)
Backend: Java Spring Boot API (Hosted on EC2)
Database: MariaDB (AWS RDS)
🧰 Technologies Used
Layer	Technology
Frontend	React.js
Backend	Java, Maven
Database	MariaDB (AWS RDS)
Hosting	AWS EC2 (Ubuntu)
Code Repo	GitHub
Terminal	MobaXterm (SSH GUI)
📦 Project Structure
cloudblitz-student-app: Full-stack project (frontend + backend)
EasyCRUD: Helper repository for setup steps
1️⃣ RDS: Setting Up MariaDB
Open AWS RDS and create a MariaDB database.
Set the DB name, username, and password.
Choose "Connect to EC2" (if you want private access).
Configure Security Group:
Open ports: 3306 (MySQL), etc.
Wait for the database status to become Available.
Copy the RDS endpoint URL for use in backend connection.
2️⃣ EC2: Launch a Virtual Machine
Launch an Ubuntu instance.
Use instance type: t2.micro (free tier).
Configure Security Group to allow:
22 (SSH), 80 (HTTP), 443 (HTTPS)
Download the .pem SSH key.
🔑 Access EC2 via MobaXterm
Download MobaXterm
Open SSH Terminal.
Fill in:
Remote Host = EC2 Public IP
Username = ubuntu (for Ubuntu)
SSH Key (.pem)
Click OK to connect.
🔄 Install Backend Dependencies
Become root:

sudo su
Clone backend repo:

git clone https://github.com/ganrajdol99215/cloudblitz-student-app.git
cd cloudblitz-student-app/backend
Install Java, Maven, JDK:

sudo apt update
sudo apt install openjdk-11-jdk maven -y
Edit application.properties with RDS DB credentials:

vim src/main/resources/application.properties
Build backend:

mvn clean package
Run backend:

java -jar target/student-registration-backend-0.0.1-SNAPSHOT.jar
To run in background:

nohup java -jar target/student-registration-backend-0.0.1-SNAPSHOT.jar > backend.log 2>&1 &
🌐 Frontend Setup (React.js)
Clone repo:

cd ~
git clone https://github.com/ganrajdol99215/EasyCRUD.git
cd EasyCRUD/frontend
Install dependencies:

npm install
npm i axios web-vitals
Configure .env:

REACT_APP_API_BASE_URL=http://<EC2_PUBLIC_IP>:<API_PORT>
Build project:

npm run build
🌍 Host Frontend on Apache
Install Apache:

sudo apt install apache2 -y
Deploy build:

sudo cp -rf dist/* /var/www/html/
Start Apache:

sudo systemctl start apache2
sudo systemctl status apache2
✅ Verify Everything
Access App: Open your EC2 Public IP in browser.
Register Data: Use the app UI to register entries.
Verify Database:
mysql -u admin -p -h <RDS_ENDPOINT>
🔗 Useful Links
Backend Repo
Helper Repo (EasyCRUD)
🏁 Summary
This 3-Tier architecture uses:

RDS for DB layer,
EC2 for hosting React and Java backend,
GitHub for version control,
Apache to serve the React build.
✅ You have now deployed a scalable, cloud-native 3-tier web application.
