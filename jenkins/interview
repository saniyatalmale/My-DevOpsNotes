
# ğŸš€ 20 Advanced Jenkins Pipeline Questions for DevOps Learners (With Answers)

## 1. How does Jenkins internally manage state in a long-running pipeline job?
Jenkins uses a feature called **Durable Task Plugin** and **Checkpointing** (via `workflow-cps`) to persist pipeline state. When a pipeline hits a `sh` or `sleep`, it serializes the execution state and stores it in disk under the Jenkins home directory.

**Example**: If the agent disconnects during a `sleep`, Jenkins resumes from the next step once the agent reconnects.

---

## 2. Difference between `script` block vs scripted pipeline?
- **Declarative Pipeline with `script` block**: Used for logic not supported in declarative syntax.
- **Scripted Pipeline**: Full flexibility using Groovy.

**Example**:
```groovy
pipeline {
  agent any
  stages {
    stage('Example') {
      steps {
        script {
          if (env.BRANCH_NAME == 'main') {
            echo 'Deploy to production'
          }
        }
      }
    }
  }
}
```

---

## 3. How does `input` work and what if it waits indefinitely?
`input` pauses the pipeline for manual approval.

**Risk**: Job waits forever unless timeout is set.

**Example**:
```groovy
input message: 'Approve deployment?', timeout: 10, unit: 'MINUTES'
```

---

## 4. How to generate parallel stages dynamically?
Use `script` to define dynamic map and call `parallel`.

**Example**:
```groovy
def envs = ['dev', 'qa', 'staging']
def branches = envs.collectEntries { env ->
  ["${env}" : { echo "Deploying to ${env}" }]
}
parallel branches
```

---

## 5. Multi-environment deployment with approvals?
Use `input` and `when` blocks.

**Example**:
```groovy
stage('Deploy to prod') {
  when {
    branch 'main'
  }
  steps {
    input 'Approve Production Deployment?'
    sh './deploy-prod.sh'
  }
}
```

---

## 6. Why use shared libraries?
Avoid code duplication. Centralize pipeline logic.

**Example**:
- `vars/deployApp.groovy`:
```groovy
def call(env) {
  echo "Deploying to ${env}..."
}
```
- Jenkinsfile:
```groovy
@Library('my-shared-library') _
deployApp('staging')
```

---

## 7. Security risks in pipelines?
- Executing `sh` with untrusted input
- Using `input` without timeout or restriction

**Mitigation**:
- Use `withCredentials`
- Set `input` parameters and access controls

---

## 8. How does credential masking work?
Jenkins masks credentials in logs using regex. Fails if echoed indirectly.

**Example**:
```groovy
withCredentials([string(credentialsId: 'SECRET', variable: 'TOKEN')]) {
  sh 'curl -H "Authorization: Bearer $TOKEN" ...'
}
```

---

## 9. Rollback logic on failure?
Capture previous build state and deploy if current fails.

**Example**:
```groovy
try {
  sh './deploy-latest.sh'
} catch (e) {
  echo 'Rollback...'
  sh './deploy-previous.sh'
}
```

---

## 10. Fan-out/Fan-in in pipelines?
- Fan-out: Use `parallel`
- Fan-in: Use `waitUntil` or gather results

**Example**:
```groovy
parallel task1: { build 'testA' }, task2: { build 'testB' }
```

---

## 11. Blue-green deployment with Jenkins?
Use DNS or Load Balancer switching logic.

**Example**:
```groovy
sh './deploy-blue.sh'
sh './switch-lb-to-blue.sh'
```

---

## 12. Throttle concurrent builds?
Use **Throttle Concurrent Builds Plugin** or pipeline-level check.

**Example**:
```groovy
properties([
  pipelineTriggers([]),
  disableConcurrentBuilds()
])
```

---

## 13. Limitations of `parallel`?
- No shared state
- Harder error handling

**Workaround**: Use shared libraries or coordinated reporting.

---

## 14. How to trace complex pipelines?
- Use Blue Ocean UI
- Use `echo`, `timestamps`, and `buildName`

**Example**:
```groovy
timestamps { echo 'Step X started' }
```

---

## 15. Reusing logic via `vars/` and `src/`?
- `vars/` contains global functions.
- `src/` is for Java-style packages and classes.

**Example**:
```groovy
// vars/deployEnv.groovy
def call(env) { echo "Deploying to ${env}" }
```

---

## 16. Dynamic build parameters from API?
Use **Active Choices Plugin** or custom scripts.

**Example**:
Groovy script fetches environments from an API.

---

## 17. `stash/unstash` vs `archiveArtifacts`?
- `stash`: Temporary storage between stages/nodes.
- `archiveArtifacts`: Permanent after build completes.

**Example**:
```groovy
stash name: 'build', includes: '**/*.jar'
unstash 'build'
```

---

## 18. Graceful cancellation?
Use `catchError` or `timeout` blocks.

**Example**:
```groovy
timeout(time: 5, unit: 'MINUTES') {
  sh './long-task.sh'
}
```

---

## 19. Secure and audit deployment triggers?
- Use `input` with `submitter`
- Restrict access via Role-based Strategy Plugin

**Example**:
```groovy
input message: 'Deploy?', submitter: 'admin'
```

---

## 20. How to make Jenkins HA?
- Use **Jenkins Operations Center** (CloudBees)
- Use multiple masters with shared storage
- Backup `JENKINS_HOME` regularly

**Architecture**:
- Load balancer -> Jenkins master(s) -> Agents

---
